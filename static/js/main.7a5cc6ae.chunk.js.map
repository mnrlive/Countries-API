{"version":3,"sources":["components/Header.js","components/Countries.js","components/Home.js","components/Country.js","components/Footer.js","components/WrongPage.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","state","darkMode","darktStyle","handleSlider","_this","setState","react_default","a","createElement","Fragment","this","className","type","name","id","onChange","htmlFor","version","xmlns","width","height","viewBox","d","fill","Component","Countries","props","questions","questionsAll","map","country","index","react_router_dom","to","image","key","concat","src","alt","question","Home","countriesAll","isLoaded","option","optionUpper","searchValue","filtered","filterActive","regionChoosed","scroll","scrollCheck","window","scrollY","handleSearchCountry","e","target","value","newCountriesList","filter","toLowerCase","includes","toLocaleLowerCase","handleFilterRegion","handleCloseGlobalFilterRegion","handleChangeRegion","currentTarget","getAttribute","valueUpper","slice","toUpperCase","length","_this2","addEventListener","fetch","then","response","ok","Error","status","json","data","catch","error","console","log","prevProps","prevState","_this3","removeEventListener","onClick","placeholder","components_Countries","scrollTo","Country","answers","answer","alpha3Code","nativeName","region","subRegion","Footer","WrongPage","App","routeCountries","react_router","exact","path","render","components_Country","countryAll","flag","population","questionn","capital","borders","basename","process","components_Header","components_Home","components_WrongPage","components_Footer","Boolean","location","hostname","match","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a5cc6ae.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../style/Header.scss';\n\nclass Header extends Component {\n\n    state = {\n        darkMode: false,\n    }\n\n    darktStyle = 'body { background-color: hsl(207, 26%, 17%); } * {color:hsl(0, 0%, 100%);} .header, .footer {background-color: hsl(209, 23%, 22%)} .countryCard__description, .filter__chooseRegion, .filter__dropdown, .filter__searchInput, .scroll, .btn{background-color: hsl(209, 23%, 22%)} .filter__dropdown-item:hover{color:hsl(200, 15%, 8%); background-color: hsl(0,0%,100%);} .countryCard__description {border: 0} *:active, .scroll__arrowUp{color:hsl(0, 0%, 100%);} .scroll, .btn:hover{box-shadow: 0rem 0rem .5rem .2rem rgba(255, 255, 255, 0.4)} .btn:focus{box-shadow: inset 0rem 0rem .5rem .2rem rgba(255, 255, 255, 0.4)}';\n\n    handleSlider = () => {\n        this.setState({\n            darkMode: !this.state.darkMode,\n        })\n    }\n    render() {\n        return (\n            <>\n                {this.state.darkMode ? <style>{this.darktStyle}</style> : null}\n                <header className=\"header\">\n                    <h1 className=\"header__logo\">Where in the world?</h1>\n                    <div className=\"header__changeMode\">\n                        <input className=\"header__change-input\" type=\"checkbox\" name=\"mode\" id=\"mode\" onChange={this.handleSlider} />\n                        <label htmlFor=\"mode\" className='header__darkLightMode'>\n                            <svg className=\"header__icon-moon\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n                                <title>moon</title>\n                                <path d=\"M13.719 1.8c0.686 0.385 1.332 0.867 1.916 1.449 3.42 3.422 3.42 8.966 0 12.386s-8.965 3.42-12.386 0c-0.583-0.584-1.065-1.231-1.449-1.916 3.335 1.867 7.633 1.387 10.469-1.449s3.318-7.134 1.45-10.47z\" fill={this.state.darkMode ? \"hsl(0, 0%, 100%)\" : \"hsl(209, 23%, 22%)\"}></path>\n                            </svg>\n                            <span className=\"header__mode-name\">{this.state.darkMode ? `Light Mode` : `Dark Mode`}</span>\n                        </label>\n                    </div>\n                </header>\n            </>\n        );\n    }\n}\n\n\nexport default Header;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport '../style/Countries.scss'\n\nconst Countries = (props) => {\n\n    const questions = props.questionsAll.map((country, index) => (\n\n        <NavLink to={country.image} className=\"navLink\" key={index}>\n            {/* country.cioc ? country.cioc : country.name - jesli ma cioc to uzywaj w celu dobrego linkowanie z borderami, ktore posluguja sie skrotami, a cioc to skrot */}\n            {/* badz sposob z alpha3Code zeby bylo zgodne z linkami z border, np border IRN to w alpha3Code Iranu tez IRN, ale juz cioc to IRI wiec linki sa sprzeczne, kilka jest takich wyjatkow, alpha3Code===border */}\n            <div className=\"countryCard\" key={index}>\n                <div className=\"countryCard__flag\">\n                    <img className={`countryCard__flagImg countryCard__flagImg--${country.image}`} src={country.image} alt={`${country.question} flag`} />\n                </div>\n                <div className=\"countryCard__description\">\n                    <h1 className=\"countryCard__primary\">{country.question}</h1>\n                    \n                </div>\n\n            </div>\n        </NavLink>\n    ))\n    return (\n        <>\n            <div className='countries-container'>\n                {questions}\n            </div>\n        </>\n    );\n}\n\nexport default Countries;\n","import React, { Component } from 'react';\nimport { BrowserRouter as NavLink } from 'react-router-dom';\nimport Countries from '../components/Countries';\nimport '../style/Home.scss'\nclass Home extends Component {\n    state = {\n        countriesAll: [],\n        isLoaded: false,\n        option: \"all\",\n        optionUpper: \"\",\n        searchValue: \"\",\n        filtered: \"\",\n        filterActive: false,\n        regionChoosed: false,\n        scroll: false,\n\n    }\n\n    componentDidMount() {\n        //Nasłuchiwanie scrolla, który umożliwi powrót na początek strony\n        window.addEventListener('scroll', this.scrollCheck, false);\n\n        fetch('https://restcountries.eu/rest/v2/all')\n            .then(response => {\n                if (response.ok) {\n                    return response;\n                }\n                else {\n                    throw Error(response.status)\n                }\n            })\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    countriesAll: data,\n                    isLoaded: true,\n                })\n            })\n            .catch(error => console.log(error));\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.option !== this.state.option) {\n            //warunek jest po to, żeby fetch się zmieniał jeśli została wybrana opcja all to niech nie dodaje region, tylko opcje, żeby wyszło\n            //https://restcountries.eu/rest/v2/all, a jeśli została wybrana jakakolwiek inna opcja to niech doda region i wybrana opcje, żeby\n            //wyszło https://restcountries.eu/rest/v2/region/europe\n            fetch(`https://restcountries.eu/rest/v2/${this.state.option === \"all\" ? \"\" : \"region/\"}${this.state.option}`)\n                .then(response => {\n                    if (response.ok) {\n                        return response;\n                    }\n                    else {\n                        throw Error(response.status)\n                    }\n                })\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({\n                        filtered: \"\", //wyczysc tablice filtered, jesli jest ona pusta to wyswietla sie wszystkie opcje z danej kategorii (wiaze sie z inputem, czyli jesli wybiore jakas opcje to wyzeruj tablice filtered i wartosc z input)\n                        searchValue: \"\", //w celu wyczyszczenia inputa wyszukiwania, przy zmianie regionu\n                        countriesAll: data,\n                        isLoaded: true,\n                    })\n                })\n                .catch(error => console.log(error));\n        }\n\n    }\n\n    //Odmontowanie scrolla\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.scrollCheck, false);\n    }\n\n    scrollCheck = () => {\n        const beginScroll = window.scrollY < 100;\n        if (beginScroll === false) {\n            this.setState({\n                scroll: true,\n            })\n        } else {\n            this.setState({\n                scroll: false,\n            })\n        }\n    }\n\n    handleSearchCountry = (e) => {\n        this.setState({\n            searchValue: e.target.value,\n        })\n        let actualCountriesList = []; //aktualna lista krajów\n        let newCountriesList = []; //nowa lista, którą następnie będzie tablica filtered\n        if (e.target.value !== \"\") {//jeśli zostało coś wpisane\n            actualCountriesList = this.state.countriesAll; //aktualna lista krajów równa się tablicy krajów z api (mogą być z wszystkich krajów, bądź jeśli została wybrana jakaś opcja z danego regionu)\n            newCountriesList = actualCountriesList.filter(country => { //filtrowanie, jeśli jakiś kraj zawiera wpisaną frazę to go zwróć, toLowerCase() jest zastosowane, żeby porównywany kraj i wartość z inputa miały małe litery, żeby nie wystąpił konflikt\n                return country.name.toLowerCase().includes(e.target.value.toLocaleLowerCase());\n            })\n        } else {\n            newCountriesList = this.state.countriesAll; //jeśli nic nie zostało wpisane to nowa lista posiada wartość z api\n        }\n        this.setState({\n            filtered: newCountriesList, //tablica filtered ma teraz wartość newCountriesList, czyli nowej tablicy\n        });\n    }\n\n    //Toggle, jesli uzytkownik kliknie na Filter By Region to niech filter activ zmieni sie na true, jesli kliknie ponownie to na false\n    handleFilterRegion = () => {\n        this.setState({\n            filterActive: !this.state.filterActive,\n        })\n    }\n\n    //sluzy do zamkniecia dropdown listy zwiazanej z filtrowaniej jesli jest ona otwarta i uzytkownik kliknie w obszar diva homa\n    handleCloseGlobalFilterRegion = () => {\n        if (this.state.filterActive === true) {\n            this.setState({\n                filterActive: false,\n            })\n        }\n    }\n\n\n    //Pobranie wartosci kliknietej opcji w dropdown list, ustawienie stanu, jesli opcja zostanie wybrana to filterActive bedzie ustawiony na false w celu zamkniecia dropDown listy, regionChoosed zostaje ustawiony na true, w celu uzycia warunku, ktory zastapi Filter By Region wybrana opcja\n    handleChangeRegion = (e) => {\n        let value = e.currentTarget.getAttribute('value')\n        let valueUpper = value.slice(0, 1).toUpperCase() + value.slice(1, value.length);\n        this.setState({\n            option: value,\n            optionUpper: valueUpper,\n            regionChoosed: true,\n            filterActive: false,\n        })\n    }\n\n    render() {\n        return (\n            <div className='home' onClick={this.handleCloseGlobalFilterRegion}>\n                <div className=\"filter\">\n                    <div className=\"filter__searchPanel\">\n                        <svg className=\"filter__icon\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <title>magnifying-glass</title>\n                            <path d=\"M17.545 15.467l-3.779-3.779c0.57-0.935 0.898-2.035 0.898-3.21 0-3.417-2.961-6.377-6.378-6.377s-6.186 2.769-6.186 6.186c0 3.416 2.961 6.377 6.377 6.377 1.137 0 2.2-0.309 3.115-0.844l3.799 3.801c0.372 0.371 0.975 0.371 1.346 0l0.943-0.943c0.371-0.371 0.236-0.84-0.135-1.211zM4.004 8.287c0-2.366 1.917-4.283 4.282-4.283s4.474 2.107 4.474 4.474c0 2.365-1.918 4.283-4.283 4.283s-4.473-2.109-4.473-4.474z\"></path>\n                        </svg>\n                        <input className=\"filter__searchInput\" type=\"text\" placeholder=\"Search for a country...\" value={this.state.searchValue} onChange={this.handleSearchCountry} />\n                    </div>\n\n                    <div className=\"filter__selectPanel\">\n                        <NavLink to=\"./\">\n                            <span onClick={this.handleFilterRegion} className={this.state.filterActive ? \"filter__chooseRegion filter__chooseRegion--caretUp\" : \"filter__chooseRegion filter__chooseRegion--caretDown\"}>{this.state.regionChoosed ? this.state.optionUpper : \"Filter by Region\"}</span>\n                            <ul className={this.state.filterActive ? \"filter__dropdown visible\" : \"filter__dropdown\"}>\n                                <li className=\"filter__dropdown-item filter__dropdown-item--all\" value=\"all\"\n                                    onClick={this.handleChangeRegion}>All</li>\n                                <li className=\"filter__dropdown-item filter__dropdown-item--africa\" value=\"africa\"\n                                    onClick={this.handleChangeRegion}>Africa</li>\n                                <li className=\"filter__dropdown-item filter__dropdown-item--americas\" value=\"americas\"\n                                    onClick={this.handleChangeRegion}>Americas</li>\n                                <li className=\"filter__dropdown-item filter__dropdown-item--asia\" value=\"asia\"\n                                    onClick={this.handleChangeRegion}>Asia</li>\n                                <li className=\"filter__dropdown-item filter__dropdown-item--europe\" value=\"europe\"\n                                    onClick={this.handleChangeRegion}>Europe</li>\n                                <li className=\"filter__dropdown-item filter__dropdown-item--oceania\" value=\"oceania\"\n                                    onClick={this.handleChangeRegion}>Oceania</li>\n                            </ul>\n                        </NavLink>\n                    </div>\n                </div>\n                {/* Warunek 1 jeśli dane jeszcze się nie załadowały, to niech wyświetli się napis Loading */}\n                {/* Warunek 2 jeśli tablica pofiltrowana jest pusta (bo nic nie ma w inpucie, bądź została wybrana jakaś opcja z droplisty) to wyświetl tablicę countries (czyli bezpośrednio z api), jeśli filtered nie jest puste to wyświetl kraje pofiltrowane */}\n                {this.state.isLoaded ? <Countries countriesAll={this.state.filtered === \"\" ? this.state.countriesAll : this.state.filtered} /> : <div className='loading'><span className='loading__loader'></span></div>}\n                <div className={this.state.scroll ? 'scroll' : null} onClick={() => { window.scrollTo(0, 0) }}>\n                    <i className={this.state.scroll ? \"fas fa-arrow-up scroll__arrowUp\" : null}></i>\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport \"../style/Country.scss\";\n\nconst Country = (props) => {\n\n    const answers = props.answers.map((answer, index) => (\n        <li className=\"borders-item\" key={index}>\n            <NavLink to={answer} className=\"navLink\">\n                <button className=\"btn btn--borders\">{answer}</button>\n            </NavLink>\n        </li>\n    ))\n\n    return (\n        <div className=\"country-container\">\n            <div className=\"country-container__back\">\n                <NavLink to=\"/\" className=\"navLink\">\n                    <button className=\"btn country-container__button-back\">Back</button>\n                </NavLink>\n\n            </div>\n            <div className=\"country-details\">\n                <div className=\"country-details__flag\">\n                    <img className={`country-details__flagImg country-details__flagImg--${props.alpha3Code}`} src={props.image} alt={`${props.question} flag`} />\n                </div>\n                <div className=\"country-details__info\">\n                    <h1 className=\"country-details__headingPrimary\">{props.question}</h1>\n                    <ul className=\"info-list info-list--partOne\">\n                        <li className=\"info-item info-item--nativeName\">\n                            <h4 className=\"country-details__headingQuaternary\">Native Name:</h4>{props.nativeName}\n                        </li>\n                        \n                        <li className=\"info-item\">\n                            <h4 className=\"country-details__headingQuaternary\">Region:</h4>{props.region}\n                        </li>\n                        <li className=\"info-item\">\n                            <h4 className=\"country-details__headingQuaternary\">Sub Region:</h4>{props.subRegion}\n                        </li>\n                        <li className=\"info-item\">\n                            <h4 className=\"country-details__headingQuaternary\">Capital:</h4>capital\n                        </li>\n                    </ul>\n                    <ul className=\"info-list info-list--partTwo\">\n                        <ul className=\"info-list__domain\">\n                            <h4 className=\"country-details__headingQuaternary\">Top Level Domain:</h4>757\n                        </ul>\n                        <ul className=\"info-list__curriences\">\n                            <h4 className=\"country-details__headingQuaternary\">Curriences: </h4>cur\n                        </ul>\n                        <ul className=\"info-list__languages\">\n                            <h4 className=\"country-details__headingQuaternary\">Languages:</h4>lg\n                        </ul>\n                    </ul>\n                    <ul className=\"info-list info-list--partThree\">\n                        <ul className=\"info-list__borders\">\n                            <h4>BorderCountries:</h4>\n                            {answers}\n                        </ul>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Country;\n","import React from 'react';\nimport \"../style/Footer.scss\";\nconst Footer = () => {\n    return (\n        <footer className=\"footer\">\n            \n        </footer>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport '../style/WrongPage.scss';\nconst WrongPage = () => {\n    return (\n        <>\n            <h1>Page not Found</h1>\n        </>\n    );\n}\n\nexport default WrongPage;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Header from '../components/Header';\nimport Home from '../components/Home';\nimport Country from '../components/Country';\nimport Footer from '../components/Footer';\nimport WrongPage from '../components/WrongPage';\nimport '../style/App.scss';\n\nclass App extends Component {\n\n  /* https://restcountries.eu/ */\n  /* ALL  https://restcountries.eu/rest/v2/all */\n  /* Name - Search by country name. It can be the native name or partial name\n  https://restcountries.eu/rest/v2/name/{name}, https://restcountries.eu/rest/v2/name/united \n  */\n  /* Full Name - Search by country full name\n  https://restcountries.eu/rest/v2/name/{name}?fullText=true\n  https://restcountries.eu/rest/v2/name/aruba?fullText=true\n  */\n  /* Region - Search by region: Africa, Americas, Asia, Europe, Oceania\n  https://restcountries.eu/rest/v2/region/{region}\n  https://restcountries.eu/rest/v2/region/europe\n  */\n\n  state = {\n    countriesAll: [],\n  }\n\n\n  componentDidMount() {\n    fetch('https://mnrlive.github.io/api/website_data.json')\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        else {\n          throw Error(response.status)\n        }\n      })\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          countriesAll: data,\n        })\n      })\n      .catch(error => console.log(error));\n  }\n\n\n\n  render() {\n    const routeCountries = this.state.countriesAll.map((country, index) => (\n      <Route exact path={`/${country.image}`} key={index}\n        render={() => <main className=\"main main--country\"><Country countryAll={this.state.countriesAll} flag={country.image} name={country.question} nativeName={country.question} population={country.question}\n          region={country.question} subRegion={country.questionn} capital={country.question} borders={country.borders} alpha3Code={country.alpha3Code}\n        /></main>} //zeby country wyswietlalo odpowiednie panstwo zwiazane z linkiem\n      />\n    ))\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <>\n          <div className=\"App\">\n            <div className=\"container\">\n              <Header />\n\n              <Switch>\n                <Route exact path=\"/\" render={() => <main className=\"main main--home\"><Home /> </main>}\n                />\n                {routeCountries}\n                <Route render={() => <main className=\"main main--error\"><WrongPage /></main>}\n                />\n              </Switch>\n              <Footer />\n            </div>\n          </div>\n        </>\n      </Router >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}